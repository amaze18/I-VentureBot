{"docstore/data": {"e6595848-65a4-4c7d-9cda-263e2f32b4a5": {"__data__": {"id_": "e6595848-65a4-4c7d-9cda-263e2f32b4a5", "embedding": null, "metadata": {"page_label": "1", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Amazon Web Services"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fb5e27cb-488d-47f4-ad9c-b0bd33ae1678", "node_type": "4", "metadata": {"page_label": "1", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "a2a8b81a2b6caff669b65e5efdc8bd84a964f8deaf6cc6f9f3eeadf4a5e123ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7521d7a5-69db-41e3-9887-74fdef56b57b", "node_type": "1", "metadata": {}, "hash": "17313b7015cf9fc02a40d23b22bb0775f187ebf4ebfbcab0b8e082f740d704fe", "class_name": "RelatedNodeInfo"}}, "text": "AWS CodeDeploy and CodePipeline Overview\nand Setup Guide\nImandi Sai Ganesh\nMarch 9, 2024\n1 Introduction\nAWS CodeDeploy and CodePipeline are essential services provided by Amazon\nWeb Services (AWS) for automating software deployments and continuous in-\ntegration/continuous deployment (CI/CD) pipelines. This document serves as\na comprehensive guide to understanding and setting up these services.\n2 Schematic map\nSource Control (e.g., Git)\nAWS Code Pipeline\nContinuous Integration (CI)\nAWS Code Deploy\nContinuous Deployment (CD)\nProduction Environment\nFigure 1: CI/CD Process\n1", "start_char_idx": 0, "end_char_idx": 577, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7521d7a5-69db-41e3-9887-74fdef56b57b": {"__data__": {"id_": "7521d7a5-69db-41e3-9887-74fdef56b57b", "embedding": null, "metadata": {"page_label": "2", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["AWS Fargate", "Amazon EC2", "AWS Lambda"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bc111330-3ada-4242-8c16-a026dac2736e", "node_type": "4", "metadata": {"page_label": "2", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "b7d8f6de751e38748e155d3836f38ee11797f61c58d5204fc28ff5c845a65005", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6595848-65a4-4c7d-9cda-263e2f32b4a5", "node_type": "1", "metadata": {"page_label": "1", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "a2a8b81a2b6caff669b65e5efdc8bd84a964f8deaf6cc6f9f3eeadf4a5e123ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70a6deac-334f-4f75-8e56-82104e06cddd", "node_type": "1", "metadata": {}, "hash": "c6bf84f3bf85238341e4e9afcd377974da5800920f67a61bdfe788dec4d13ab5", "class_name": "RelatedNodeInfo"}}, "text": "3 AWS CodeDeploy\n3.1 Overview\nAWS CodeDeploy automates the deployment of applications to a variety of\ncompute services, including Amazon EC2, AWS Fargate, and AWS Lambda. It\nensures reliable and consistent deployments across your infrastructure.\n3.2 Setup Guide\nTo set up AWS CodeDeploy, follow these steps:\n1.IAM Role Setup : Create an IAM role with the necessary permissions\nfor CodeDeploy to access your AWS resources.\n2.CodeDeploy Agent Installation : Install the CodeDeploy agent on your\nEC2 instances to enable communication with the CodeDeploy service.\n3.Application Setup : Define your application in the CodeDeploy console,\nspecifying details such as the application name, compute platform, and\ndeployment type.\n4.Deployment Group Creation : Create a deployment group within your\napplication, specifying the deployment configuration, EC2 instances, and\ndeployment settings.\n3.3 Configuration\nThe appspec.yml file is a key component of the AWS CodeDeploy setup. Below\nis an example of an appspec.yml file:\nversion: 0.0\nos: linux\nfiles:\n- source: /\ndestination: /opt/codedeploy-agent/deployment-root/\npermissions:\n- object: /home/ubuntu/course_chat\npattern: \"**\"\nowner: ubuntu\ngroup: ubuntu\nhooks:\nApplicationStop:\n- location: scripts/application_stop.sh\nrunas: root\n# Other lifecycle event hooks...\nThe applicationstart.sh script includes bash scripts to stop the streamlit\napp\n2", "start_char_idx": 0, "end_char_idx": 1387, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70a6deac-334f-4f75-8e56-82104e06cddd": {"__data__": {"id_": "70a6deac-334f-4f75-8e56-82104e06cddd", "embedding": null, "metadata": {"page_label": "3", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Install Python"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3e4b8cc3-34e5-4af9-a129-c347c826e3d8", "node_type": "4", "metadata": {"page_label": "3", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "32833390eb848cbfa094d421558aa3d1e9a22bbd7aaf75f41daa6b894568143d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7521d7a5-69db-41e3-9887-74fdef56b57b", "node_type": "1", "metadata": {"page_label": "2", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "b7d8f6de751e38748e155d3836f38ee11797f61c58d5204fc28ff5c845a65005", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe146914-9355-4174-85aa-4cefd1d9a985", "node_type": "1", "metadata": {}, "hash": "01391e61422c002c29771de0aeb22add4d1ba3631e9f6a8b905fd8b8bfe96864", "class_name": "RelatedNodeInfo"}}, "text": "#!/bin/bash\n# Stop Streamlit application\nsystemctl stop streamlit\nThe beforeinstall.sh script includes bash scripts to ensure the install event\n#!/bin/bash\n# Update package repositories and install system packages\napt-get update\napt-get install -y python3-pip\nThe install.sh script includes bash scripts to install necessary packages. Like\ninstalling libraries in requirements.txt\n#!/bin/bash\n# Install Python dependencies\npip3 install -r requirements.txt\nThe afterinstall.sh script includes bash scripts that will be executed after\ninstallation process completes like starting streamlit service.\n#!/bin/bash\n# Start Streamlit application\nsystemctl start streamlit\nThe applicationstart.sh script includes bash scripts to start the streamlit\napp\n#!/bin/bash\n# Start Streamlit application\nstreamlit run /home/ubuntu/course_chat/streamlit_app.py\nThe validateservice.sh script includes bash scripts to validate whether all\nservices are executing well or not\n#!/bin/bash\n# Check if Streamlit application is running\nresponse=$(curl -s -o /dev/null -w \"%{http_code}\" http://100.25.194.156:8080/)\nif [[ \"$response\" == \"200\" ]]; then\necho \"Streamlit application is running.\"\nelse\necho \"Streamlit application is not running.\"\nexit 1\nfi\n3", "start_char_idx": 0, "end_char_idx": 1227, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe146914-9355-4174-85aa-4cefd1d9a985": {"__data__": {"id_": "fe146914-9355-4174-85aa-4cefd1d9a985", "embedding": null, "metadata": {"page_label": "4", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e340f7f-b6de-4f05-9b9f-65d56eec4ae7", "node_type": "4", "metadata": {"page_label": "4", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "9f6f41e3b2df41ea9a085ab6a3f99536d31a39cafff02049a29ba96315b958a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70a6deac-334f-4f75-8e56-82104e06cddd", "node_type": "1", "metadata": {"page_label": "3", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "32833390eb848cbfa094d421558aa3d1e9a22bbd7aaf75f41daa6b894568143d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7", "node_type": "1", "metadata": {}, "hash": "2a90a1b0427b1d59c2a41a5a5916a28cbf721f1d17aa9bcbb07fb3952efdea30", "class_name": "RelatedNodeInfo"}}, "text": "3.4 Deployment Process\nThe deployment process in AWS CodeDeploy consists of several stages, includ-\ning ApplicationStop, DownloadBundle, BeforeInstall, Install, AfterInstall, Ap-\nplicationStart, and ValidateService. Each stage can trigger custom scripts or\nactions defined in the appspec.yml file.\n3.5 Troubleshooting\n3.5.1 Error: appspec.yml File Not Found\nIf the CodeDeploy agent cannot locate the appspec.yml file within the deploy-\nment archive, follow these steps to resolve the issue:\n1. Ensure that the appspec.yml file is correctly located in the root directory\nof your deployment bundle.\n2. Verify that the paths specified in the file match the actual paths within\nthe deployment environment.\n4 AWS CodePipeline\n4.1 Overview\nAWS CodePipeline orchestrates the release process of your application, from\nsource code management to deployment. It integrates with various AWS ser-\nvices, including CodeDeploy, CodeBuild, and others, allowing you to create a\nfully automated CI/CD pipeline.\n4.2 Setup Guide\nTo set up AWS CodePipeline, follow these steps:\n1.Pipeline Creation : Create a new pipeline in the CodePipeline console,\nspecifying the pipeline name and source provider (e.g., GitHub).\n2.Source Configuration : Connect your source repository (e.g., GitHub)\nto the pipeline, configuring the repository branch and authentication.\n3.Deployment Configuration : Configure the deployment stage of the\npipeline, selecting AWS CodeDeploy as the deployment provider and spec-\nifying the deployment group and application name.\n4.3 Pipeline Execution\nAWS CodePipeline automatically executes the stages of your pipeline when\nchanges are detected in the source repository. Each stage triggers the execution\nof actions defined in the pipeline, such as source code retrieval, build, and\ndeployment.\n4", "start_char_idx": 0, "end_char_idx": 1794, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7": {"__data__": {"id_": "3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7", "embedding": null, "metadata": {"page_label": "5", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Advanced Features AWS CodePipeline"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c39cd313-9ecb-47fe-ab5f-fa6cb6584272", "node_type": "4", "metadata": {"page_label": "5", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "80e438c7c779c7d3b7f4b64b27c62f7df79576dd41669a43ff74236b3e0fcf43", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe146914-9355-4174-85aa-4cefd1d9a985", "node_type": "1", "metadata": {"page_label": "4", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "9f6f41e3b2df41ea9a085ab6a3f99536d31a39cafff02049a29ba96315b958a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f121ab54-4edd-46e1-ae57-206d6702384b", "node_type": "1", "metadata": {}, "hash": "6c968cbe8d1d43a1aebf1c09efdc8ad358a5f038f46359775002f6529817721d", "class_name": "RelatedNodeInfo"}}, "text": "4.4 Advanced Features\nAWS CodePipeline offers advanced features such as custom stages, manual ap-\nproval actions, and conditional transitions between stages. These features enable\nyou to create flexible and customizable deployment pipelines tailored to your\nspecific requirements.\n5 Conclusion\nAWS CodeDeploy and CodePipeline are powerful services that streamline the\ndeployment process of your applications, ensuring reliability, consistency, and\nautomation. By following the setup and configuration guidelines outlined in this\ndocument, you can create robust CI/CD pipelines that automate the release\nprocess from code commit to deployment.\n6 Appendix\nAdditional resources:\n\u2022AWS CodeDeploy Documentation\n\u2022AWS CodePipeline Documentation\n\u2022GitHub Repository - coursechat\n5", "start_char_idx": 0, "end_char_idx": 771, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f121ab54-4edd-46e1-ae57-206d6702384b": {"__data__": {"id_": "f121ab54-4edd-46e1-ae57-206d6702384b", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22", "entities": ["Ruby"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7", "node_type": "1", "metadata": {"page_label": "5", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}, "hash": "80e438c7c779c7d3b7f4b64b27c62f7df79576dd41669a43ff74236b3e0fcf43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58775286-2810-417b-a28b-3b94b64d6acb", "node_type": "1", "metadata": {}, "hash": "109516f38908cb4eb15e0b161879b514bcb6ddf7385bf37fefb0fa20fdf537ef", "class_name": "RelatedNodeInfo"}}, "text": "#!/usr/bin/env ruby\n\n##################################################################\n# This part of the code might be running on Ruby versions other\n# than 2.0. Testing on multiple Ruby versions is required for\n# changes to this part of the code.\n##################################################################\n\nclass LoggerWrapper\n  def initialize(loggers)\n    @loggers = loggers\n  end\n\n  def debug(message)\n    @loggers.each do |logger|\n      logger.debug(message)\n    end\n  end\n\n  def error(message)\n    @loggers.each do |logger|\n      logger.error(message)\n    end\n  end\n\n  def info(message)\n    @loggers.each do |logger|\n      logger.info(message)\n    end\n  end\n\n  def level(message)\n    @loggers.each do |logger|\n      logger.level = message\n    end\n  end\n\n  def warn(message)\n    @loggers.each do |logger|\n      logger.warn(message)\n    end\n  end\nend\n\nlog_file_path = \"/tmp/codedeploy-agent.update.log\"\n\nrequire 'logger'\n\nif($stdout.isatty)\n  # if we are being run in a terminal, log to stdout and the log file.\n  @log = LoggerWrapper.new([Logger.new(log_file_path), Logger.new($stdout)])\n  @log.level(Logger::INFO)\nelse\n  # keep at most 2MB of old logs rotating out 1MB at a time\n  @log = Logger.new(log_file_path, 2, 1048576)\n  @log.level = Logger::INFO\n  # make sure anything coming out of ruby ends up in the log file\n  $stdout.reopen(log_file_path, 'a+')\n  $stderr.reopen(log_file_path, 'a+')\nend\n\nrequire 'net/http'\n\n# This class is copied (almost directly) from lib/instance_metadata.rb\n# It is not loaded as the InstanceMetadata makes additional assumptions\n# about the runtime that cannot be satisfied at install time, hence the\n# trimmed copy.\nclass IMDS\n  IP_ADDRESS = '169.254.169.254'\n  TOKEN_PATH = '/latest/api/token'\n  BASE_PATH = '/latest/meta-data'\n  IDENTITY_DOCUMENT_PATH = '/latest/dynamic/instance-identity/document'\n  DOMAIN_PATH = '/latest/meta-data/services/domain'\n  HTTP_MAX_RETRY_COUNT = 2\n\n  attr :disable_imds_v1\n  attr :log\n  def initialize(disable_imds_v1, log)\n    @disable_imds_v1 = disable_imds_v1\n    @log = log\n  end\n\n  def imds_supported?\n    imds_v2? || imds_v1?\n  end\n\n  def disable_imds_v1?\n    !!@disable_imds_v1\n  end\n\n  def imds_v1?\n    begin\n      get_request(BASE_PATH) { |response|\n        return response.kind_of? Net::HTTPSuccess\n      }\n    rescue\n      false\n    end\n  end\n\n  def imds_v2?\n    begin\n      token = get_imds_v2_token(TOKEN_PATH)\n      get_request(BASE_PATH, token) { |response|\n        return response.kind_of? Net::HTTPSuccess\n      }\n    rescue\n      false\n    end\n  end\n\n  def region\n    begin\n      identity_document()['region'].strip\n    rescue\n      nil\n    end\n  end\n\n  def domain\n    begin\n      get_instance_metadata(DOMAIN_PATH).strip\n    rescue\n      nil\n    end\n  end\n\n  def identity_document\n    # JSON is lazy loaded to ensure we dont break older ruby runtimes\n    require 'json'\n    JSON.parse(get_instance_metadata(IDENTITY_DOCUMENT_PATH).strip)\n  end\n\n  private\n  def get_instance_metadata(path)\n    begin\n      token = get_imds_v2_token(TOKEN_PATH)\n    rescue\n      if disable_imds_v1?\n        @log.error('HTTP error from metadata service to get imdsv2 token.')\n        raise 'HTTP error from metadata service to get imdsv2 token.'\n      end\n      @log.warn('IMDSv2 http request failed, falling back to IMDSv1.')\n      return get_request(path)\n    end\n    get_request(path, token)\n  end\n\n  private\n  def get_imds_v2_token(path)\n    @current_imds_v2_token ||= put_request(path)\n  end\n\n  private\n  def http_request(request)\n    retry_interval_in_sec = [1, 2]\n    begin\n      Net::HTTP.start(IP_ADDRESS, 80, :read_timeout => 10, :open_timeout => 10, :max_retries => HTTP_MAX_RETRY_COUNT) do |http|\n        response = http.request(request)\n        if block_given?\n          yield(response)\n        elsif response.kind_of?", "start_char_idx": 0, "end_char_idx": 3813, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58775286-2810-417b-a28b-3b94b64d6acb": {"__data__": {"id_": "58775286-2810-417b-a28b-3b94b64d6acb", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f121ab54-4edd-46e1-ae57-206d6702384b", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "c9b0f6f67356bcfac3cd82e67480feac10a3dedb73c9d02e8d82bcf773e516a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6588b4b-d0cf-47ea-82d9-7b394c0ee580", "node_type": "1", "metadata": {}, "hash": "43c88bd2e0feb6b490f629549e3ea8677ddf1d77a6f2db71fe2ee2aeda607a88", "class_name": "RelatedNodeInfo"}}, "text": "yield(response)\n        elsif response.kind_of? Net::HTTPSuccess\n          response.body\n        else\n          raise \"HTTP error from metadata service: #{response.message}, code #{response.code}\"\n        end\n      end\n    rescue\n      if delay = retry_interval_in_sec.shift # will be nil if the list is empty\n        sleep delay\n        retry # backs up to just after the \"begin\"\n      else\n        raise # with no args re-raises original error\n      end\n    end\n  end\n\n  def put_request(path, &block)\n    request = Net::HTTP::Put.new(path)\n    request['X-aws-ec2-metadata-token-ttl-seconds'] = '21600'\n    http_request(request, &block)\n  end\n\n  def get_request(path, token = nil, &block)\n    request = Net::HTTP::Get.new(path)\n    unless token.nil?\n      request['X-aws-ec2-metadata-token'] = token\n    end\n    http_request(request, &block)\n  end\nend\n\nclass S3Bucket\n  # Split out as older versions of ruby dont like multi entry attr\n  attr :domain\n  attr :region\n  attr :bucket\n  def initialize(domain, region, bucket)\n    @domain = domain\n    @region = region\n    @bucket = bucket\n  end\n\n  def object_uri(object_key)\n    URI.parse(\"https://#{@bucket}.s3.#{@region}.#{@domain}/#{object_key}\")\n  end\nend\n\nbegin\n  require 'fileutils'\n  require 'openssl'\n  require 'open-uri'\n  require 'uri'\n  require 'getoptlong'\n  require 'tempfile'\n\n  def usage\n    print <<EOF\n\ninstall [--sanity-check] [--disable-imds-v1] [--proxy http://hostname:port] <package-type>\n   --sanity-check [optional]\n   --disable-imds-v1 [optional]\n   --proxy [optional]\n   package-type: 'rpm', 'deb', or 'auto'\n\nInstalls fetches the latest package version of the specified type and\ninstalls it. rpms are installed with yum; debs are installed using gdebi.\n\nThis program is invoked automatically to update the agent once per day using\nthe same package manager the codedeploy-agent is initially installed with.\n\nTo use this script for a hands free install on any system specify a package\ntype of 'auto'. This will detect if yum or gdebi is present on the system\nand select the one present if possible. If both rpm and deb package managers\nare detected the automatic detection will abort\nWhen using the automatic setup, if the system has apt-get but not gdebi,\nthe gdebi will be installed using apt-get first.\n\nIf --sanity-check is specified, the install script will wait for 3 minutes post installation\nto check for a running agent.\n\nIf --disable-imds-v1 is specified, the install script will not fallback to IMDS v1 call when\nIMDS v2 call is failed\n\nTo use a HTTP proxy, specify --proxy followed by the proxy server\ndefined by http://hostname:port\n\nThis install script needs Ruby versions 2.x or 3.x installed as a prerequisite.\nCurrently recommended Ruby versions are 2.0.0, 2.1.8, 2.2.4, 2.3, 2.4, 2.5, 2.6, 2.7, 3.0, 3.1, and 3.2\nIf multiple Ruby versions are installed, the default ruby version will be used.\nIf the default ruby version does not satisfy requirement, the newest version will be used.\nIf you do not have a supported Ruby version installed, please install one of them first.\n\nEOF\n  end\n\n  def supported_ruby_versions\n    ['3.2','3.1','3.0', '2.7', '2.6', '2.5', '2.4', '2.3', '2.2', '2.1', '2.0']\n  end\n\n  # check ruby version, only version 2.x 3.x works\n  def check_ruby_version_and_symlink\n    @log.info(\"Starting Ruby version check.\")\n    actual_ruby_version = RUBY_VERSION.split('.').map{|s|s.to_i}[0,2]\n\n    supported_ruby_versions.each do |version|\n      if ((actual_ruby_version <=> version.split('.", "start_char_idx": 3766, "end_char_idx": 7259, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6588b4b-d0cf-47ea-82d9-7b394c0ee580": {"__data__": {"id_": "d6588b4b-d0cf-47ea-82d9-7b394c0ee580", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58775286-2810-417b-a28b-3b94b64d6acb", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "8c66859191d72acf0caf7504c6db638b42f3ba3d9f8dd8561d2982038532225c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a78677dc-7ef6-4940-845f-2033c68d2ecc", "node_type": "1", "metadata": {}, "hash": "65de047994daa01c0148b1417b16ca57ceabd2541eb6b1407a36313cb61a40af", "class_name": "RelatedNodeInfo"}}, "text": "actual_ruby_version = RUBY_VERSION.split('.').map{|s|s.to_i}[0,2]\n\n    supported_ruby_versions.each do |version|\n      if ((actual_ruby_version <=> version.split('.').map{|s|s.to_i}) == 0)\n        return File.join(RbConfig::CONFIG[\"bindir\"], RbConfig::CONFIG[\"RUBY_INSTALL_NAME\"] + RbConfig::CONFIG[\"EXEEXT\"])\n      end\n    end\n\n    supported_ruby_versions.each do |version|\n      if(File.exist?(\"/usr/bin/ruby#{version}\"))\n        return \"/usr/bin/ruby#{version}\"\n      elsif (File.symlink?(\"/usr/bin/ruby#{version}\"))\n        @log.error(\"The symlink /usr/bin/ruby#{version} exists, but it's linked to a non-existent directory or non-executable file.\")\n        exit(1)\n      end\n    end\n\n    unsupported_ruby_version_error\n    exit(1)\n  end\n\n  def unsupported_ruby_version_error\n    @log.error(\"Current running Ruby version for \"+ENV['USER']+\" is \"+RUBY_VERSION+\", but Ruby version 2.x, 3.x needs to be installed.\")\n    @log.error('If you already have the proper Ruby version installed, please either create a symlink to /usr/bin/ruby2.x,')\n    @log.error( \"or run this install script with right interpreter. Otherwise please install Ruby 2.x, 3.x for \"+ENV['USER']+\" user.\")\n    @log.error('You can get more information by running the script with --help option.')\n  end\n\n  def parse_args()\n    if (ARGV.length > 4)\n      usage\n      @log.error('Too many arguments.')\n      exit(1)\n    elsif (ARGV.length < 1)\n      usage\n      @log.error('Expected package type as argument.')\n      exit(1)\n    end\n\n    @sanity_check = false\n    @disable_imds_v1 = false\n    @reexeced = false\n    @http_proxy = nil\n    @target_version_arg = nil\n\n    @args = Array.new(ARGV)\n    opts = GetoptLong.new(\n      ['--sanity-check', GetoptLong::NO_ARGUMENT],\n      ['--disable-imds-v1', GetoptLong::NO_ARGUMENT],\n      ['--help', GetoptLong::NO_ARGUMENT],\n      ['--re-execed', GetoptLong::NO_ARGUMENT],\n      ['--proxy', GetoptLong::OPTIONAL_ARGUMENT],\n      ['-v', '--version', GetoptLong::OPTIONAL_ARGUMENT]\n    )\n    opts.each do |opt, args|\n      case opt\n      when '--sanity-check'\n        @sanity_check = true\n      when '--disable-imds-v1'\n        @disable_imds_v1 = true\n      when '--help'\n        usage\n        exit(0)\n      when '--re-execed'\n        @reexeced = true\n      when '--proxy'\n        if (args != '')\n          @http_proxy = args\n        end\n      when '-v' || '--version'\n        @target_version_arg = args\n      end\n    end\n    if (ARGV.length < 1)\n      usage\n      @log.error('Expected package type as argument.')\n      exit(1)\n    end\n    @type = ARGV.shift.downcase;\n  end\n  def force_ruby2x(ruby_interpreter_path)\n    # change interpreter when symlink /usr/bin/ruby2.x exists, but running with non-supported ruby version\n    actual_ruby_version = RUBY_VERSION.split('.').map{|s|s.to_i}\n    left_bound = '2.0.0'.split('.').map{|s|s.to_i}\n    right_bound = '3.2.1'.split('.').map{|s|s.to_i}\n    if (actual_ruby_version <=> left_bound) < 0\n      if(!@reexeced)\n        @log.info(\"The current Ruby version is not 2.x or 3.x! Restarting the installer with #{ruby_interpreter_path}\")\n        exec(\"#{ruby_interpreter_path}\", __FILE__, '--re-execed' , *@args)\n      else\n        unsupported_ruby_version_error\n        exit(1)\n      end\n    elsif ((actual_ruby_version <=> right_bound) > 0)\n      @log.warn(\"The Ruby version in #{ruby_interpreter_path} is \"+RUBY_VERSION+\", . Attempting to install anyway.\")", "start_char_idx": 7095, "end_char_idx": 10504, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a78677dc-7ef6-4940-845f-2033c68d2ecc": {"__data__": {"id_": "a78677dc-7ef6-4940-845f-2033c68d2ecc", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22", "entities": ["The Ruby"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6588b4b-d0cf-47ea-82d9-7b394c0ee580", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "1879129a4ae543b9e6d4a41a2b344c6920091efa27dfcd434f6726afbb9e0b0e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7a28d28-37be-4359-b346-6698f02e7a5c", "node_type": "1", "metadata": {}, "hash": "7852d87922b762ac0868621002d544321c92c8cc013c7f4948afef0e494c1a10", "class_name": "RelatedNodeInfo"}}, "text": "Restarting the installer with #{ruby_interpreter_path}\")\n        exec(\"#{ruby_interpreter_path}\", __FILE__, '--re-execed' , *@args)\n      else\n        unsupported_ruby_version_error\n        exit(1)\n      end\n    elsif ((actual_ruby_version <=> right_bound) > 0)\n      @log.warn(\"The Ruby version in #{ruby_interpreter_path} is \"+RUBY_VERSION+\", . Attempting to install anyway.\")\n    end\n  end\n\n  parse_args()\n\n  # Be helpful when 'help' was used but not '--help'\n  if @type == 'help'\n    usage\n    exit(0)\n  end\n\n  if (Process.uid != 0)\n    @log.error('Must run as root to install packages')\n    exit(1)\n  end\n\n  ########## Force running as Ruby 2.x or fail here       ##########\n  ruby_interpreter_path = check_ruby_version_and_symlink\n  force_ruby2x(ruby_interpreter_path)\n\n  def run_command(*args)\n    exit_ok = system(*args)\n    $stdout.flush\n    $stderr.flush\n    @log.debug(\"Exit code: #{$?.exitstatus}\")\n    return exit_ok\n  end\n\n  def get_ec2_metadata_property(property)\n    imds = IMDS.new(@disable_imds_v1, @log)\n    if imds.imds_supported?\n      begin\n        return imds.send(property)\n      rescue => error\n        @log.warn(\"Could not get #{property} from EC2 metadata service at '#{error.message}'\")\n      end\n    else\n      @log.warn(\"EC2 metadata service unavailable...\")\n    end\n    return nil\n  end\n\n  def get_region\n    @log.info('Checking AWS_REGION environment variable for region information...')\n    region = ENV['AWS_REGION']\n    return region if region\n\n    @log.info('Checking EC2 metadata service for region information...')\n    region = get_ec2_metadata_property(:region)\n    return region if region\n\n    @log.info('Using fail-safe default region: us-east-1')\n    return 'us-east-1'\n  end\n\n  def get_domain(fallback_region = nil)\n    @log.info('Checking AWS_DOMAIN environment variable for domain information...')\n    domain = ENV['AWS_DOMAIN']\n    return domain if domain\n\n    @log.info('Checking EC2 metadata service for domain information...')\n    domain = get_ec2_metadata_property(:domain)\n    return domain if domain\n\n    domain = 'amazonaws.com'\n    if !fallback_region.nil? && fallback_region.split(\"-\")[0] == 'cn'\n      domain = 'amazonaws.com.cn'\n    end\n\n    @log.info(\"Using fail-safe default domain: #{domain}\")\n    return domain\n  end\n\n  def get_package_from_s3(s3_bucket, key, package_file)\n    @log.info(\"Downloading package from bucket #{s3_bucket.bucket} and key #{key}...\")\n\n    uri = s3_bucket.object_uri(key)\n    @log.info(\"Endpoint: #{uri}\")\n\n    # stream package file to disk\n    retries ||= 0\n    exceptions = [OpenURI::HTTPError, OpenSSL::SSL::SSLError]\n    begin\n      uri.open(:ssl_verify_mode => OpenSSL::SSL::VERIFY_PEER, :redirect => true, :read_timeout => 120, :proxy => @http_proxy) do |s3|\n        package_file.write(s3.read)\n      end\n    rescue *exceptions  => e\n      @log.warn(\"Could not find package to download at '#{uri.to_s}' - Retrying... Attempt: '#{retries.to_s}'\")\n      if (retries < 5)\n        sleep 2 ** retries\n        retries += 1\n        retry\n      else\n        @log.error(\"Could not download CodeDeploy Agent Package. Exiting Install script.\")", "start_char_idx": 10126, "end_char_idx": 13251, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7a28d28-37be-4359-b346-6698f02e7a5c": {"__data__": {"id_": "f7a28d28-37be-4359-b346-6698f02e7a5c", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22", "entities": ["OpenSSL"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a78677dc-7ef6-4940-845f-2033c68d2ecc", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "09fa5f0083b609f741b29bcb703b036c9b025b3a46532af34a53537d111358cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62b61d79-02dc-486c-8788-e3e57c399d0d", "node_type": "1", "metadata": {}, "hash": "17b7d68c25260a40035f713afea9314ad18ddd1e92c3937b3b3be96bb509ac8c", "class_name": "RelatedNodeInfo"}}, "text": "Exiting Install script.\")\n        exit(1)\n      end\n    end\n  end\n\n  def get_version_file_from_s3(s3_bucket, key)\n    @log.info(\"Downloading version file from bucket #{s3_bucket.bucket} and key #{key}...\")\n\n    uri = s3_bucket.object_uri(key)\n    @log.info(\"Endpoint: #{uri}\")\n\n    retries ||= 0\n    exceptions = [OpenURI::HTTPError, OpenSSL::SSL::SSLError, Errno::ETIMEDOUT]\n    begin\n      require 'json'\n\n      version_string = uri.read(:ssl_verify_mode => OpenSSL::SSL::VERIFY_PEER, :redirect => true, :read_timeout => 120, :proxy => @http_proxy)\n      JSON.parse(version_string)\n    rescue *exceptions => e\n      @log.warn(\"Could not find version file to download at '#{uri.to_s}' - Retrying... Attempt: '#{retries.to_s}'\")\n      if (retries < 5)\n        sleep 2 ** retries\n        retries += 1\n        retry\n      else\n        @log.error(\"Could not download CodeDeploy Agent version file. Exiting Install script.\")\n        exit(1)\n      end\n    end\n  end\n\n  def install_from_s3(s3_bucket, package_key, install_cmd)\n    package_base_name = File.basename(package_key)\n    package_extension = File.extname(package_base_name)\n    package_name = File.basename(package_base_name, package_extension)\n    package_file = Tempfile.new([\"#{package_name}.tmp-\", package_extension]) # unique file with 0600 permissions\n\n    get_package_from_s3(s3_bucket, package_key, package_file)\n    package_file.close\n\n    install_cmd << package_file.path\n    @log.info(\"Executing `#{install_cmd.join(\" \")}`...\")\n\n    if (!run_command(*install_cmd))\n      @log.error(\"Error installing #{package_file.path}.\")\n      package_file.unlink\n      exit(1)\n    end\n\n    package_file.unlink\n  end\n\n  def do_sanity_check(cmd)\n    if @sanity_check\n      @log.info(\"Waiting for 3 minutes before I check for a running agent\")\n      sleep(3 * 60)\n      res = run_command(cmd, 'codedeploy-agent', 'status')\n      if (res.nil? || res == false)\n        @log.info(\"No codedeploy agent seems to be running. Starting the agent.\")\n        run_command(cmd, 'codedeploy-agent', 'start-no-update')\n      end\n    end\n  end\n\n  def get_target_version(target_version, type, s3_bucket)\n    if target_version.nil?\n      version_file_key = 'latest/LATEST_VERSION'\n      version_data = get_version_file_from_s3(s3_bucket, version_file_key)\n      if version_data.include? type\n        return version_data[type]\n      else\n        @log.error(\"Unsupported package type '#{type}'\")\n        exit(1)\n      end\n    end\n    return target_version\n  end\n\n  @log.info(\"Starting update check.\")\n\n  if (@type == 'auto')\n    @log.info('Attempting to automatically detect supported package manager type for system...')\n\n    has_yum = run_command('which yum >/dev/null 2>/dev/null')\n    has_apt_get = run_command('which apt-get >/dev/null 2>/dev/null')\n    has_gdebi = run_command('which gdebi >/dev/null 2>/dev/null')\n    has_zypper = run_command('which zypper >/dev/null 2>/dev/null')\n\n    if (has_yum && (has_apt_get || has_gdebi))\n      @log.error('Detected both supported rpm and deb package managers. Please specify which package type to use manually.')\n      exit(1)\n    end\n\n    if(has_yum)\n      @type = 'rpm'\n    elsif(has_zypper)\n      @type = 'zypper'\n    elsif(has_gdebi)\n      @type = 'deb'\n    elsif(has_apt_get)\n      @type = 'deb'\n\n      @log.warn('apt-get found but no gdebi. Installing gdebi with `apt-get install gdebi-core -y`...')\n      #use -y to answer yes to confirmation prompts\n      if(!run_command('/usr/bin/apt-get', 'install', 'gdebi-core', '-y'))\n        @log.error('Could not install gdebi.')\n        exit(1)\n      end\n    else\n      @log.error('Could not detect any supported package managers.')", "start_char_idx": 13226, "end_char_idx": 16887, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62b61d79-02dc-486c-8788-e3e57c399d0d": {"__data__": {"id_": "62b61d79-02dc-486c-8788-e3e57c399d0d", "embedding": null, "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "a353e5c8a97109d2b07050f913472ff0698799540980dfcf95088a23c2327572", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7a28d28-37be-4359-b346-6698f02e7a5c", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "26e1b90de7a33a0194bcc5f62c8de96041fc7e0afff2ea3aa0cdb2b474d92737", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3283aa5d-6622-48c3-ae57-60b3ebb5cda7", "node_type": "1", "metadata": {}, "hash": "980ca76f7a00a7a5aae16eb3ad1f8c8cf71fcccf19ac18dc73174f704bcdcec9", "class_name": "RelatedNodeInfo"}}, "text": "Installing gdebi with `apt-get install gdebi-core -y`...')\n      #use -y to answer yes to confirmation prompts\n      if(!run_command('/usr/bin/apt-get', 'install', 'gdebi-core', '-y'))\n        @log.error('Could not install gdebi.')\n        exit(1)\n      end\n    else\n      @log.error('Could not detect any supported package managers.')\n      exit(1)\n    end\n  end\n\n  region = get_region()\n  domain = get_domain(region)\n  bucket = \"aws-codedeploy-#{region}\"\n  s3_bucket = S3Bucket.new(domain, region, bucket)\n\n  target_version = get_target_version(@target_version_arg, @type, s3_bucket)\n\n  case @type\n  when 'rpm'\n    running_version = `rpm -q codedeploy-agent`\n    running_version.strip!\n    if target_version.include? running_version\n      @log.info('Running version matches target version, skipping install')\n    else\n      #use -y to answer yes to confirmation prompts\n      install_cmd = ['/usr/bin/yum', '-y', 'localinstall']\n      install_from_s3(s3_bucket, target_version, install_cmd)\n      do_sanity_check('/sbin/service')\n    end\n  when 'deb'\n    running_agent = `dpkg -s codedeploy-agent`\n    running_agent_info = running_agent.split\n    version_index = running_agent_info.index('Version:')\n    if !version_index.nil?\n      running_version = running_agent_info[version_index + 1]\n    else\n      running_version = \"No running version\"\n    end\n    @log.info(\"Running version \" + running_version)\n    if target_version.include? running_version\n      @log.info('Running version matches target version, skipping install')\n    else\n      #use -n for non-interactive mode\n      #use -o to not overwrite config files unless they have not been changed\n      install_cmd = ['/usr/bin/gdebi', '-n', '-o', 'Dpkg::Options::=--force-confdef', '-o', 'Dpkg::Options::=--force-confold']\n      install_from_s3(s3_bucket, target_version, install_cmd)\n      do_sanity_check('/usr/sbin/service')\n    end\n  when 'zypper'\n    #use -n for non-interactive mode\n    install_cmd = ['/usr/bin/zypper', 'install', '-n']\n    install_from_s3(s3_bucket, target_version, install_cmd)\n  else\n    @log.error(\"Unsupported package type '#{@type}'\")\n    exit(1)\n  end\n\n  @log.info(\"Update check complete.\")\n  @log.info(\"Stopping updater.\")\n\nrescue SystemExit => e\n  # don't log exit() as an error\n  raise e\nrescue Exception => e\n  # make sure all unhandled exceptions are logged to the log\n  @log.error(\"Unhandled exception: #{e.inspect}\")\n  e.backtrace.each do |line|\n    @log.error(\"  at \" + line)\n  end\n  exit(1)\nend", "start_char_idx": 16552, "end_char_idx": 19044, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3283aa5d-6622-48c3-ae57-60b3ebb5cda7": {"__data__": {"id_": "3283aa5d-6622-48c3-ae57-60b3ebb5cda7", "embedding": null, "metadata": {"file_path": "/home/ubuntu/nohup.out", "file_name": "/home/ubuntu/nohup.out", "file_size": 464, "creation_date": "2024-03-09", "last_modified_date": "2024-03-09", "entities": ["False"]}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9b37049b-3593-499e-aecc-bbba3b507969", "node_type": "4", "metadata": {"file_path": "/home/ubuntu/nohup.out", "file_name": "/home/ubuntu/nohup.out", "file_size": 464, "creation_date": "2024-03-09", "last_modified_date": "2024-03-09"}, "hash": "74e1ec891bd7158fe48e9be4041623ceef731aa53e9e13d894a8abf2d042b380", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62b61d79-02dc-486c-8788-e3e57c399d0d", "node_type": "1", "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22"}, "hash": "3b97defa054a450e3afa753e70794434f74e43216471dcc49323b0eec90bcfdf", "class_name": "RelatedNodeInfo"}}, "text": "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to False.\n\n\n  You can now view your Streamlit app in your browser.\n\n  Network URL: http://172.31.53.3:8501\n  External URL: http://100.25.194.156:8501\n\n  Stopping...\n\nCollecting usage statistics. To deactivate, set browser.gatherUsageStats to False.\n\n\n  You can now view your Streamlit app in your browser.\n\n  Network URL: http://172.31.53.3:8501\n  External URL: http://100.25.194.156:8501", "start_char_idx": 1, "end_char_idx": 462, "text_template": "[Excerpt from document]\n{metadata_str}\nExcerpt:\n-----\n{content}\n-----\n", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"e6595848-65a4-4c7d-9cda-263e2f32b4a5": {"doc_hash": "73b295ce738118c4e382ed7f317b0ba800bd39968972ca8177a8b8a57ca790a2", "ref_doc_id": "fb5e27cb-488d-47f4-ad9c-b0bd33ae1678"}, "7521d7a5-69db-41e3-9887-74fdef56b57b": {"doc_hash": "daff06760c366b170539afddbe3db302d8b3382c1c31b76e57f8979b49644260", "ref_doc_id": "bc111330-3ada-4242-8c16-a026dac2736e"}, "70a6deac-334f-4f75-8e56-82104e06cddd": {"doc_hash": "747083d7d3f1bcbdc732c06b5c168300ab05932a91ee353ff9e6488169d54af2", "ref_doc_id": "3e4b8cc3-34e5-4af9-a129-c347c826e3d8"}, "fe146914-9355-4174-85aa-4cefd1d9a985": {"doc_hash": "9f6f41e3b2df41ea9a085ab6a3f99536d31a39cafff02049a29ba96315b958a8", "ref_doc_id": "4e340f7f-b6de-4f05-9b9f-65d56eec4ae7"}, "3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7": {"doc_hash": "eacc08d38f541b4fb04b69b57d65148f2e3f06a639349a8a8aee317ca00e711d", "ref_doc_id": "c39cd313-9ecb-47fe-ab5f-fa6cb6584272"}, "f121ab54-4edd-46e1-ae57-206d6702384b": {"doc_hash": "c19d066507719423a7fbb53e3f3aee90cae19757a63f69d3b2a8e92b97acbe97", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "58775286-2810-417b-a28b-3b94b64d6acb": {"doc_hash": "8c66859191d72acf0caf7504c6db638b42f3ba3d9f8dd8561d2982038532225c", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "d6588b4b-d0cf-47ea-82d9-7b394c0ee580": {"doc_hash": "1879129a4ae543b9e6d4a41a2b344c6920091efa27dfcd434f6726afbb9e0b0e", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "a78677dc-7ef6-4940-845f-2033c68d2ecc": {"doc_hash": "a1702f08a12b7d7a1bb2df4c67fb05797803fb9d3e1e2b16eb71a4ee6c1b5812", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "f7a28d28-37be-4359-b346-6698f02e7a5c": {"doc_hash": "bfc1031d50335f4efcfd9e278ab0cf1384f9b990e6a4b8c54d7d63cf700f81ce", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "62b61d79-02dc-486c-8788-e3e57c399d0d": {"doc_hash": "3b97defa054a450e3afa753e70794434f74e43216471dcc49323b0eec90bcfdf", "ref_doc_id": "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e"}, "3283aa5d-6622-48c3-ae57-60b3ebb5cda7": {"doc_hash": "abe0814b373aa2870763a1b7616f2573d8f53e7b0b49ea941d69a739f049298e", "ref_doc_id": "9b37049b-3593-499e-aecc-bbba3b507969"}}, "docstore/ref_doc_info": {"fb5e27cb-488d-47f4-ad9c-b0bd33ae1678": {"node_ids": ["e6595848-65a4-4c7d-9cda-263e2f32b4a5"], "metadata": {"page_label": "1", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Amazon Web Services"]}}, "bc111330-3ada-4242-8c16-a026dac2736e": {"node_ids": ["7521d7a5-69db-41e3-9887-74fdef56b57b"], "metadata": {"page_label": "2", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["AWS Fargate", "Amazon EC2", "AWS Lambda"]}}, "3e4b8cc3-34e5-4af9-a129-c347c826e3d8": {"node_ids": ["70a6deac-334f-4f75-8e56-82104e06cddd"], "metadata": {"page_label": "3", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Install Python"]}}, "4e340f7f-b6de-4f05-9b9f-65d56eec4ae7": {"node_ids": ["fe146914-9355-4174-85aa-4cefd1d9a985"], "metadata": {"page_label": "4", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10"}}, "c39cd313-9ecb-47fe-ab5f-fa6cb6584272": {"node_ids": ["3bbae6b4-8d95-47e6-b2cb-0059bb3e1cc7"], "metadata": {"page_label": "5", "file_name": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_path": "/home/ubuntu/CodeDeploy_and_CodePipeline_Setup (2).pdf", "file_type": "application/pdf", "file_size": 114398, "creation_date": "2024-03-10", "last_modified_date": "2024-03-10", "entities": ["Advanced Features AWS CodePipeline"]}}, "e8ba4ed1-35f9-4aea-bc70-b44d1985bd0e": {"node_ids": ["f121ab54-4edd-46e1-ae57-206d6702384b", "58775286-2810-417b-a28b-3b94b64d6acb", "d6588b4b-d0cf-47ea-82d9-7b394c0ee580", "a78677dc-7ef6-4940-845f-2033c68d2ecc", "f7a28d28-37be-4359-b346-6698f02e7a5c", "62b61d79-02dc-486c-8788-e3e57c399d0d"], "metadata": {"file_path": "/home/ubuntu/install", "file_name": "/home/ubuntu/install", "file_size": 19045, "creation_date": "2024-03-07", "last_modified_date": "2024-02-22", "entities": ["Ruby"]}}, "9b37049b-3593-499e-aecc-bbba3b507969": {"node_ids": ["3283aa5d-6622-48c3-ae57-60b3ebb5cda7"], "metadata": {"file_path": "/home/ubuntu/nohup.out", "file_name": "/home/ubuntu/nohup.out", "file_size": 464, "creation_date": "2024-03-09", "last_modified_date": "2024-03-09", "entities": ["False"]}}}}